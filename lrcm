#!/usr/bin/env bash
# github.com/cpinkus/lrcm



################# Change these variables if needed #################
####################################################################

### Buildbot URL to download cores from
cores_url=http://buildbot.libretro.com/nightly/linux/x86_64/latest

### Location of your libretro cores
cores_path=${HOME}/.config/retroarch/cores

### Location to save the logfile
logfile=${HOME}/.config/retroarch/cores/lrcm.log

####################################################################
####################################################################



function no_cores {
    # Check to see if any cores were specified
    if [[ -z "${arg2}" ]]
    then
        printf "%s\n" "No core(s) specified"
        exit 1
    fi
}



function buildbot_fail {
    # Checks if buildbot data downloads correctly
    printf "%s\n" "Buildbot data failed to download"
    printf "%s\n" "Check your internet connection"
    exit 1
}



function lrcm_usage {
    # Display the proper usage of lrcm if no argument is given
    printf "%s\n" ""
    printf "%s\n\n" "Libretro Core Manager (lrcm) usage:"
    printf "%s\t %-26s %s\n" "" "list" "List exact names of all official cores"
    printf "%s\t %-26s %s\n" "" "show" "Show cores that are currently installed"
    printf "%s\t %-26s %s\n" "" "add [CORE1] [CORE2]..." "Add [CORE] to your retroarch folder"
    printf "%s\t %-26s %s\n" "" "remove [CORE1] [CORE2]..." "Remove [CORE] from your retroarch folder"
    printf "%s\t %-26s %s\n" "" "update" "Update all of your libretro cores"
    printf "%s\t %-26s %s\n\n" "" "log" "Output the contents of the logfile"
}



function lrcm_list {
    # Grab data from $cores_url, and display in nice columns
    if ! curl -s -o "${cores_path}/.lrcm_tmp" "${cores_url}/.index-extended"
    then
        buildbot_fail
    fi
    cut -d ' ' -f 3 "${cores_path}/.lrcm_tmp" | sed 's/_libretro.so.zip//g' | sort | column

    # Cleanup
    rm "${cores_path}/.lrcm_tmp"
}



function lrcm_show {
    # Shows cores already in $cores_path
    find "${cores_path}" -name "*_libretro.so" -exec basename "{}" \; | sed 's/_libretro.so//g' | sort | column
}



function lrcm_add {
    # Grab data from $cores_url, to check if specified core exists
    if ! curl -s -o "${cores_path}/.lrcm_tmp" "${cores_url}/.index-extended"
    then
        buildbot_fail
    fi

    # Download cores
    for i in ${arg2}
    do
        if grep -q "${i}_libretro.so.zip" "${cores_path}/.lrcm_tmp"
        then
            printf "%-26s" "${i}"
            if ! curl -s -o "${cores_path}/${i}_libretro.so.zip" "${cores_url}/${i}_libretro.so.zip"
            then
                printf "%s\n" "ADD FAILED"
                printf "%s\n" "[$(date +"%d-%b-%Y %H:%M")] ADD FAILED ${corename%_libretro.so}" >> "${logfile}"
                rm "${cores_path}/.lrcm_tmp"
                exit 1
            fi
            unzip -q -o -d "${cores_path}" "${cores_path}/${i}_libretro.so.zip"
            rm "${cores_path}/${i}_libretro.so.zip"

            timestamp=$(grep "${i}_libretro.so.zip" "${cores_path}/.lrcm_tmp" | cut -d ' ' -f 1)
            printf "%s\n" "ADDED (${timestamp})"
            printf "%s\n" "[$(date +"%d-%b-%Y %H:%M")] ADDED ${i} (${timestamp})" >> "${logfile}"
        else
            printf "%-25s %s\n" "${i}" "not a valid core"
        fi
    done

    # Cleanup
    rm "${cores_path}/.lrcm_tmp"
}



function lrcm_remove {
    # Delete all cores that were specified
    for i in ${arg2}
    do
        if rm "${cores_path}/${i}_libretro.so" &>/dev/null
        then
            printf "%-25s %s\n" "${i}" "REMOVED"
            printf "%s\n" "[$(date +"%d-%b-%Y %H:%M")] REMOVED ${i}" >> "${logfile}"
        else
            printf "%-25s %s\n" "${i}" "not a valid core"
        fi
    done
}



function lrcm_update {
    # Grab data from $cores_url
    if [[ ! -a "${cores_path}/.lrcm_data" ]]
    then
        touch "${cores_path}/.lrcm_data"
        printf "%s\n" "-- Updating all cores on the first run only --"
    fi
    cp "${cores_path}/.lrcm_data" "${cores_path}/.lrcm_data.old"
    if ! curl -s -o "${cores_path}/.lrcm_data.tmp" "${cores_url}/.index-extended"
    then
        buildbot_fail
    fi

    # Check if .index-extended was downloaded properly
    if grep -q "_libretro.so.zip" "${cores_path}/.lrcm_data.tmp"
    then
        mv "${cores_path}/.lrcm_data.tmp" "${cores_path}/.lrcm_data"
    else
        printf "%s\n" "Buildbot data was not downloaded properly"
        printf "%s\n" "The \"cores_url\" variable might be invalid"
        rm "${cores_path}/.lrcm_data.tmp"
        exit 1
    fi

    # Download and replace cores
    for i in ${cores_path}/*_libretro.so
    do
        corename=$(basename "${i}")
        timestamp_old=$(grep "${corename}" "${cores_path}/.lrcm_data.old")
        timestamp_new=$(grep "${corename}" "${cores_path}/.lrcm_data")

        # Check if an update is necessary
        if [[ "${timestamp_new}" == "${timestamp_old}" ]]
        then
            printf "%-25s %s\n" "${corename%_libretro.so}" "skipped"
        else
            printf "%-26s" "${corename%_libretro.so}"
            if ! curl -s -o "${cores_path}/${corename}.zip" "${cores_url}/${corename}.zip"
            then
                printf "%s\n" "UPDATE FAILED"
                printf "%s\n" "[$(date +"%d-%b-%Y %H:%M")] UPDATE FAILED ${corename%_libretro.so}" >> "${logfile}"
                continue
            fi
            unzip -q -o -d "${cores_path}" "${cores_path}/${corename}.zip"
            rm "${cores_path}/${corename}.zip"

            timestamp=$(cut -d ' ' -f 1 <<< "${timestamp_new}")
            printf "%s\n" "UPDATED (${timestamp})"
            printf "%s\n" "[$(date +"%d-%b-%Y %H:%M")] UPDATED ${corename%_libretro.so} (${timestamp})" >> "${logfile}"
        fi
    done

    # Cleanup
    rm "${cores_path}/.lrcm_data.old"
}



function lrcm_log {
    # Check if logfile exists
    if [[ ! -a "${logfile}" ]]
    then
        touch "${logfile}"
    fi

    # Print logfile to stdout
    printf "%s\n" "$(<"${logfile}")"
}



# Commandline arguments
if [[ "${1}" == "list" ]]
then
    lrcm_list
elif [[ "${1}" == "show" ]]
then
    lrcm_show
elif [[ "${1}" == "add" ]]
then
    arg2=${*:2}
    no_cores
    lrcm_add
elif [[ "${1}" == "remove" ]]
then
    arg2=${*:2}
    no_cores
    lrcm_remove
elif [[ "${1}" == "update" ]]
then
    lrcm_update
elif [[ "${1}" == "log" ]]
then
    lrcm_log
else
    lrcm_usage
fi
